import streamlit as st
import sys
import os
import json
import random 
from pathlib import Path
from typing import Tuple
from dotenv import load_dotenv
load_dotenv()

project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from utils.llm_client import LLMClient, get_available_models
from utils.search_tools import WebSearchTool, format_search_results
from utils.steam_api import SteamAPI

MEMORY_DIR = Path("data")
MEMORY_FILE = MEMORY_DIR / "chat_memory.json"

REFUSALS_TH = [
    "‡∏ú‡∏°‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôÇ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏° ‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏° ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πÄ‡∏õ‡∏Ñ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
    "‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡πâ‡∏≤‡∏≤ üéÆ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á GTA, Elden Ring, ‡∏£‡∏≤‡∏Ñ‡∏≤, DLC, ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
    "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏° üôè ‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",
    "‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡πâ‡∏≤ üòÖ ‡∏ä‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡πÄ‡∏•‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Ç‡πà‡∏≤‡∏ß/‡πÅ‡∏ô‡∏ß",
    "‡∏Ç‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ü§ù ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
    "‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üéØ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
]
def random_refusal() -> str:
    return random.choice(REFUSALS_TH)

GAME_HINTS = [
    "‡πÄ‡∏Å‡∏°","game","video game","steam","playstation","ps4","ps5",
    "xbox","switch","nintendo","pc","mobile","android","ios",
    "dlc","mod","patch","fps","rpg","moba","open world","survival",
    "multiplayer","singleplayer","esports","rank","‡∏£‡∏µ‡∏ß‡∏¥‡∏ß","‡πÅ‡∏ô‡∏ß","‡∏™‡πÄ‡∏õ‡∏Ñ","‡∏£‡∏≤‡∏Ñ‡∏≤",
    "gta","elden ring","valorant","dota","lol","cs2","minecraft","roblox","cyberpunk",
]
def is_game_query(text: str) -> bool:
    t = text.lower()
    return any(k in t for k in GAME_HINTS)

def load_memory():
    """Load chat memory if file exists, but clear on new session"""
    memory_file = Path("data/chat_memory.json")

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    if not st.session_state.get("initialized", False):
        if memory_file.exists():
            memory_file.unlink()
        st.session_state.initialized = True

    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    if memory_file.exists():
        with open(memory_file, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []
    return []

def save_memory(messages):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ï‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    MEMORY_DIR.mkdir(exist_ok=True)
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(messages, f, ensure_ascii=False, indent=2)

def clear_memory():
    """‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"""
    if MEMORY_FILE.exists():
        MEMORY_FILE.unlink()

def init_session_state():
    """Initialize Streamlit session state"""
    if "messages" not in st.session_state:
        st.session_state.messages = load_memory()

    if "llm_client" not in st.session_state or st.session_state.llm_client is None:
        st.session_state.llm_client = LLMClient(
            model=os.getenv("DEFAULT_MODEL", "gpt-3.5-turbo"),
            temperature=float(os.getenv("TEMPERATURE", 0.7)),
            max_tokens=int(os.getenv("MAX_TOKENS", 1000))
        )

    if "search_tool" not in st.session_state:
        st.session_state.search_tool = WebSearchTool()

    if "search_api" not in st.session_state:
        st.session_state.search_api = "serper"

def get_steam_game_info(game_name: str) -> str:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Steam"""
    appid = SteamAPI.search_game(game_name)
    if not appid:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Steam Store."

    data = SteamAPI.get_game_details(appid)
    if data:
        return SteamAPI.format_steam_info(appid, data)

    return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å Steam ‡πÑ‡∏î‡πâ."

def handle_tool_calls(message_content: str, llm_client=None) -> Tuple[str, bool]:
    if llm_client is None:
        return message_content, False

    message_lower = message_content.lower()

    # ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
    game_name_keywords = [
        "gta", "fortnite", "valorant", "call of duty", "cod", "pubg",
        "elden ring", "cyberpunk", "palworld", "counter strike", "cs2",
        "roblox", "minecraft", "overwatch", "apex", "dota", "league of legends",
        "lol", "genshin", "starfield", "battlefield", "red dead", "hollow knight"
    ]
    steam_keywords = ["‡∏£‡∏≤‡∏Ñ‡∏≤", "price", "‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", "sale", "discount", "cost", "‡∏ã‡∏∑‡πâ‡∏≠", "steam", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "‡∏™‡∏ô‡πÉ‡∏à", "download","‡πÇ‡∏´‡∏•‡∏î","‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô","‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î","download link"]
    general_game_keywords = ["‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£", "‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å", "‡πÅ‡∏ô‡∏ß", "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö", "review", "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏™‡∏ô‡∏∏‡∏Å‡πÑ‡∏´‡∏°", "‡∏î‡∏µ‡πÑ‡∏´‡∏°"]

    search_triggers = [
        "top games", "‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡πÅ‡∏£‡∏á", "‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "popular", "trending", "best selling",
        "most played", "update", "news", "‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà", "‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß", "‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà"
    ]

    #‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
    game_name = None
    for g in game_name_keywords:
        if g in message_lower:
            game_name = g
            break

    #‡∏£‡∏≤‡∏Ñ‡∏≤
    if game_name and any(k in message_lower for k in steam_keywords):
        steam_info = get_steam_game_info(game_name)
        steam_info = steam_info.replace("‡∏£‡∏≤‡∏Ñ‡∏≤: N/A", "‡∏£‡∏≤‡∏Ñ‡∏≤: Free").replace("\n", "  \n")

        final_answer = f"""\
üü® **‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°:**

{steam_info}
    <-- ‡∏´‡∏≤‡∏Å‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î Link ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö 
"""
        return final_answer, True
    
    # ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏°llm‡∏ï‡∏≠‡∏ö
    if game_name and any(k in message_lower for k in general_game_keywords):
        enhanced_prompt = f"""
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°: {message_content}

‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Steam API  
‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Å‡∏°‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
"""
        return enhanced_prompt, False

    #‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
    if any(trigger in message_lower for trigger in search_triggers):
        search_results = execute_search(message_content, 5)
        enhanced_prompt = f"""
User Query: {message_content}

I searched the web and found:
{format_search_results(search_results)}

‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏Å‡∏°
"""
        return enhanced_prompt, True

    # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà llm
    return message_content, False

def execute_search(query: str, num_results: int = 5):
    api = st.session_state.get("search_api", "serper")
    results = st.session_state.search_tool.search(query, num_results, preferred_api=api)
    return results

def display_chat_messages():
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            if message.get("search_used", False):
                st.markdown("üîç *Used search or Steam API*")
            st.markdown(message["content"])

def main():
    st.set_page_config(
        page_title="üéÆ Game & Info Chat Assistant",
        page_icon="üïπÔ∏è",
        layout="wide"
    )

    st.markdown(
    """
    <h1 style='text-align: center;'>
        üéÆ Game Chat Assistant
    </h1>
    """,
    unsafe_allow_html=True
    )

    init_session_state()

    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Settings")
        available_models = get_available_models()
        selected_model = st.selectbox("Select Model", available_models, index=0)

        st.subheader("üîç Search Settings")
        st.session_state.search_api = st.selectbox("Search API", ["serper", "tavily"], index=0)

        st.divider()
        if st.button("üß† Initialize Model"):
            with st.spinner("Initializing..."):
                st.session_state.llm_client = LLMClient(model=selected_model)
            st.success("‚úÖ Model initialized!")

        if st.button("üóëÔ∏è Clear Chat"):
            st.session_state.messages = []
            save_memory([])
            st.rerun()

        if st.button("üßπ Clear Memory"):
            clear_memory()
            st.session_state.messages = []
            st.rerun()

    # Display history
    display_chat_messages()

    prompt = st.chat_input("Ask about any game or topic... üéÆ")

    if prompt:
        #‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        with st.chat_message("user"):
            st.markdown(prompt)

        #‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏° ‡πÉ‡∏´‡πâ‡∏à‡∏ö
        if not is_game_query(prompt):
            refusal = random_refusal()
            st.session_state.messages.append({"role": "user", "content": prompt})
            st.session_state.messages.append({"role": "assistant", "content": refusal, "search_used": False})
            save_memory(st.session_state.messages)

            with st.chat_message("assistant"):
                st.markdown(refusal)
            st.stop()

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á history ‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ô gatekeeper
        st.session_state.messages.append({"role": "user", "content": prompt})
        save_memory(st.session_state.messages)

        with st.chat_message("assistant"):
            with st.spinner("Thinking..."):
                enhanced_prompt, search_used = handle_tool_calls(prompt, st.session_state.llm_client)
                response = enhanced_prompt

                # prompt‡∏ö‡∏≠‡∏Å Ai
                SYSTEM_PROMPT = """
You are a professional Game Assistant üéÆ.
You must ONLY answer questions related to *video games*.
Topics you can talk about include:
- Game details (story, gameplay, mechanics, reviews, genres)
- Platforms (PC, PlayStation, Xbox, Nintendo, Mobile)
- Game recommendations, comparisons, or similar titles
- Game prices, updates, DLCs, mods, esports, or hardware for gaming
- Game industry news, trends, or game development concepts

If the user asks about anything unrelated to games:
Politely refuse in Thai with a short friendly sentence.
"""
                if not search_used:
                    history = [
                        {"role": msg["role"], "content": msg["content"]}
                        for msg in st.session_state.messages[:-1]
                    ]
                    messages = (
                        [{"role": "system", "content": SYSTEM_PROMPT}]
                        + history
                        + [{"role": "user", "content": enhanced_prompt}]
                    )
                    response = st.session_state.llm_client.chat(messages)

                st.markdown(response)
                st.session_state.messages.append(
                    {"role": "assistant", "content": response, "search_used": search_used}
                )
                save_memory(st.session_state.messages)
if __name__ == "__main__":
    main()
