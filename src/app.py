"""
Chat Application with Web Search Tool Calling
Demonstrates function calling with web search capabilities
"""
# main

import streamlit as st

import sys
import os
import json
from pathlib import Path
from typing import Tuple
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î environment variables (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á STEAM_API_KEY)
load_dotenv()

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from utils.llm_client import LLMClient, get_available_models
from utils.search_tools import WebSearchTool, format_search_results
from utils.steam_api import SteamAPI



# ------------------------------------------------------------
# üìÅ Memory Path
# ------------------------------------------------------------
MEMORY_DIR = Path("data")
MEMORY_FILE = MEMORY_DIR / "chat_memory.json"


# ------------------------------------------------------------
# üíæ Memory Functions
# ------------------------------------------------------------
def load_memory():
    """Load chat memory if file exists, but clear on new session"""
    memory_file = Path("data/chat_memory.json")

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (session ‡πÉ‡∏´‡∏°‡πà) ‚Üí ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏•‡∏¢
    if not st.session_state.get("initialized", False):
        if memory_file.exists():
            memory_file.unlink()  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
        st.session_state.initialized = True  # ‡∏ï‡∏±‡πâ‡∏á flag ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß

    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ)
    if memory_file.exists():
        with open(memory_file, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []
    return []

def save_memory(messages):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ï‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    MEMORY_DIR.mkdir(exist_ok=True)
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(messages, f, ensure_ascii=False, indent=2)


def clear_memory():
    """‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"""
    if MEMORY_FILE.exists():
        MEMORY_FILE.unlink()


# ------------------------------------------------------------
# üîß INITIALIZATION
# ------------------------------------------------------------
def init_session_state():
    """Initialize Streamlit session state"""
    if "messages" not in st.session_state:
        st.session_state.messages = load_memory()

    if "llm_client" not in st.session_state or st.session_state.llm_client is None:
        st.session_state.llm_client = LLMClient(
            model=os.getenv("DEFAULT_MODEL", "gpt-3.5-turbo"),
            temperature=float(os.getenv("TEMPERATURE", 0.7)),
            max_tokens=int(os.getenv("MAX_TOKENS", 1000))
        )

    if "search_tool" not in st.session_state:
        st.session_state.search_tool = WebSearchTool()

    if "search_api" not in st.session_state:
        st.session_state.search_api = "serper"


# ------------------------------------------------------------
# üéÆ Steam Game Info (‡πÉ‡∏ä‡πâ API ‡∏à‡∏£‡∏¥‡∏á)
# ------------------------------------------------------------
def get_steam_game_info(game_name: str) -> str:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Steam"""
    appid = SteamAPI.search_game(game_name)
    if not appid:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Steam Store."

    data = SteamAPI.get_game_details(appid)
    if data:
        return SteamAPI.format_steam_info(appid, data)

    return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å Steam ‡πÑ‡∏î‡πâ."


# ------------------------------------------------------------
# üîç HANDLE TOOL CALLS
# ------------------------------------------------------------
def handle_tool_calls(message_content: str, llm_client=None) -> Tuple[str, bool]:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
    - ‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÑ‡∏´‡∏° / ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ / ‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡∏≠‡∏∞‡πÑ‡∏£) ‚Üí ‡πÉ‡∏ä‡πâ LLM ‡∏õ‡∏Å‡∏ï‡∏¥
    - ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ / ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ Steam API
    - ‡∏ñ‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏Å‡∏ß‡πâ‡∏≤‡∏á (top games, ‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡πÅ‡∏£‡∏á) ‚Üí ‡πÉ‡∏ä‡πâ Web Search
    """
    if llm_client is None:
        return message_content, False

    message_lower = message_content.lower()

    # üîπ ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    game_name_keywords = [
        "gta", "fortnite", "valorant", "call of duty", "cod", "pubg",
        "elden ring", "cyberpunk", "palworld", "counter strike", "cs2",
        "roblox", "minecraft", "overwatch", "apex", "dota", "league of legends",
        "lol", "genshin", "starfield", "battlefield", "red dead", "hollow knight"
    ]
    price_keywords = ["‡∏£‡∏≤‡∏Ñ‡∏≤", "price", "‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", "sale", "discount", "cost", "‡∏ã‡∏∑‡πâ‡∏≠", "steam"]
    general_game_keywords = ["‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£", "‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å", "‡πÅ‡∏ô‡∏ß", "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö", "review", "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏™‡∏ô‡∏∏‡∏Å‡πÑ‡∏´‡∏°", "‡∏î‡∏µ‡πÑ‡∏´‡∏°"]

    search_triggers = [
        "top games", "‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡πÅ‡∏£‡∏á", "‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "popular", "trending", "best selling",
        "most played", "update", "news", "‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà", "‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß", "‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà"
    ]

    # üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
    game_name = None
    for g in game_name_keywords:
        if g in message_lower:
            game_name = g
            break

    # üéÆ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ ‚Üí Steam API
    if game_name and any(k in message_lower for k in price_keywords):
        steam_info = get_steam_game_info(game_name)
        
         # ‡πÅ‡∏õ‡∏•‡∏á "N/A" ‚Üí "Free" ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Markdown-friendly line breaks
        steam_info = steam_info.replace("‡∏£‡∏≤‡∏Ñ‡∏≤: N/A", "‡∏£‡∏≤‡∏Ñ‡∏≤: Free")
        steam_info = steam_info.replace("\n", "  \n")  # Markdown: 2 spaces + \n = new line

        enhanced_prompt = f"""
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Å‡∏°: {message_content}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Steam API:
{steam_info}
"""
        return enhanced_prompt, True

    # üß† ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡πÉ‡∏´‡πâ LLM ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏≠‡∏á
    if game_name and any(k in message_lower for k in general_game_keywords):
        enhanced_prompt = f"""
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°: {message_content}

‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Steam API  
‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Å‡∏°‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
"""
        return enhanced_prompt, False

    # üåê ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° / ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö / ‡∏Ç‡πà‡∏≤‡∏ß ‚Üí ‡πÉ‡∏ä‡πâ Web Search
    if any(trigger in message_lower for trigger in search_triggers):
        query = message_content
        search_results = execute_search(query, 5)
        enhanced_prompt = f"""
User Query: {message_content}

I searched the web and found:
{format_search_results(search_results)}

‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏Å‡∏°
"""
        return enhanced_prompt, True

    # üî∏ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÄ‡∏•‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ LLM ‡∏õ‡∏Å‡∏ï‡∏¥
    return message_content, False



# ------------------------------------------------------------
# üåê SEARCH FUNCTION
# ------------------------------------------------------------
def execute_search(query: str, num_results: int = 5):
    api = st.session_state.get("search_api", "serper")
    results = st.session_state.search_tool.search(query, num_results, preferred_api=api)
    return results


# ------------------------------------------------------------
# üí¨ DISPLAY CHAT
# ------------------------------------------------------------
def display_chat_messages():
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            if message.get("search_used", False):
                st.markdown("üîç *Used search or Steam API*")
            st.markdown(message["content"])


# ------------------------------------------------------------
# üß† MAIN APP
# ------------------------------------------------------------
def main():
    st.set_page_config(
        page_title="üéÆ Game & Info Chat Assistant",
        page_icon="üïπÔ∏è",
        layout="wide"
    )

    st.markdown(
    """
    <h1 style='text-align: center;'>
        üéÆ Game Chat Assistant
    </h1>
    """,
    unsafe_allow_html=True
    )


    init_session_state()

    # Sidebar Configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Settings")
        available_models = get_available_models()
        selected_model = st.selectbox("Select Model", available_models, index=0)
        temperature = st.slider("Temperature", 0.0, 2.0, 0.7, 0.1)
        max_tokens = st.slider("Max Tokens", 50, 4000, 2000, 50)

        st.subheader("üîç Search Settings")
        st.session_state.search_api = st.selectbox("Search API", ["serper", "tavily"], index=0)

        st.divider()
        if st.button("üß† Initialize Model"):
            with st.spinner("Initializing..."):
                st.session_state.llm_client = LLMClient(
                    model=selected_model,
                    temperature=temperature,
                    max_tokens=max_tokens
                )
            st.success("‚úÖ Model initialized!")

        if st.button("üóëÔ∏è Clear Chat"):
            st.session_state.messages = []
            save_memory([])
            st.rerun()

        if st.button("üßπ Clear Memory"):
            clear_memory()
            st.session_state.messages = []
            st.rerun()

    # Display Chat
    display_chat_messages()

    prompt = st.chat_input("Ask about any game or topic... üéÆ")

    if prompt:
        st.session_state.messages.append({"role": "user", "content": prompt})
        save_memory(st.session_state.messages)

        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("Thinking..."):
                enhanced_prompt, search_used = handle_tool_calls(prompt, st.session_state.llm_client)
                response = enhanced_prompt

                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Steam ‡∏´‡∏£‡∏∑‡∏≠ Search ‚Üí ‡πÉ‡∏ä‡πâ LLM ‡∏ï‡∏≠‡∏ö
                if not search_used:
                    messages = [{"role": msg["role"], "content": msg["content"]} for msg in st.session_state.messages[:-1]]
                    messages.append({"role": "user", "content": enhanced_prompt})
                    response = st.session_state.llm_client.chat(messages)

                st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response, "search_used": search_used})
                save_memory(st.session_state.messages)

if __name__ == "__main__":
    main()
